// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkingRegistry.Infrastructure.Data;

namespace ParkingRegistry.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200807171856_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ParkingRegistry.ApplicationCore.BaseEntities.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberPlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Car");
                });

            modelBuilder.Entity("ParkingRegistry.ApplicationCore.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Discount = 0,
                            Name = "First Customer"
                        },
                        new
                        {
                            Id = 2,
                            Discount = 2,
                            Name = "Second Customer"
                        });
                });

            modelBuilder.Entity("ParkingRegistry.ApplicationCore.Entities.Parking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Parkings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            StartDate = new DateTimeOffset(new DateTime(2020, 6, 8, 8, 45, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CarId = 1,
                            EndDate = new DateTimeOffset(new DateTime(2020, 5, 8, 9, 45, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            StartDate = new DateTimeOffset(new DateTime(2020, 5, 8, 8, 45, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CarId = 2,
                            EndDate = new DateTimeOffset(new DateTime(2020, 1, 8, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            StartDate = new DateTimeOffset(new DateTime(2020, 1, 8, 8, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("ParkingRegistry.ApplicationCore.Entities.PassCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("PassCars");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 11,
                            PaymentTypeId = 2
                        },
                        new
                        {
                            Id = 12,
                            PaymentTypeId = 2
                        });
                });

            modelBuilder.Entity("ParkingRegistry.ApplicationCore.Entities.PassCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("PassCustomers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 1,
                            PaymentTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 2,
                            PaymentTypeId = 3
                        });
                });

            modelBuilder.Entity("ParkingRegistry.ApplicationCore.Entities.Types.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Discount = 0,
                            Type = "Daily"
                        },
                        new
                        {
                            Id = 2,
                            Discount = 5,
                            Type = "Weekly"
                        },
                        new
                        {
                            Id = 3,
                            Discount = 10,
                            Type = "Monthly"
                        });
                });

            modelBuilder.Entity("ParkingRegistry.ApplicationCore.Entities.CarCar", b =>
                {
                    b.HasBaseType("ParkingRegistry.ApplicationCore.BaseEntities.Entities.Car");

                    b.Property<int?>("PassId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasIndex("PassId")
                        .IsUnique()
                        .HasFilter("[PassId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("CarCar");

                    b.HasData(
                        new
                        {
                            Id = 8,
                            NumberPlate = "AAA-001",
                            PassId = 10
                        },
                        new
                        {
                            Id = 9,
                            NumberPlate = "AAA-002",
                            PassId = 11
                        },
                        new
                        {
                            Id = 10,
                            NumberPlate = "AAA-003",
                            PassId = 12
                        });
                });

            modelBuilder.Entity("ParkingRegistry.ApplicationCore.Entities.CarCustomer", b =>
                {
                    b.HasBaseType("ParkingRegistry.ApplicationCore.BaseEntities.Entities.Car");

                    b.Property<int>("PassId")
                        .HasColumnName("CarCustomer_PassId")
                        .HasColumnType("int");

                    b.HasIndex("PassId");

                    b.HasDiscriminator().HasValue("CarCustomer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NumberPlate = "OOO-001",
                            PassId = 1
                        },
                        new
                        {
                            Id = 2,
                            NumberPlate = "OOO-002",
                            PassId = 1
                        },
                        new
                        {
                            Id = 3,
                            NumberPlate = "OOO-003",
                            PassId = 1
                        },
                        new
                        {
                            Id = 4,
                            NumberPlate = "TTT-001",
                            PassId = 2
                        },
                        new
                        {
                            Id = 5,
                            NumberPlate = "TTT-002",
                            PassId = 2
                        },
                        new
                        {
                            Id = 6,
                            NumberPlate = "XXX-001",
                            PassId = 3
                        },
                        new
                        {
                            Id = 7,
                            NumberPlate = "XXX-002",
                            PassId = 3
                        });
                });

            modelBuilder.Entity("ParkingRegistry.ApplicationCore.Entities.Parking", b =>
                {
                    b.HasOne("ParkingRegistry.ApplicationCore.BaseEntities.Entities.Car", "Car")
                        .WithMany("Parkings")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParkingRegistry.ApplicationCore.Entities.PassCar", b =>
                {
                    b.HasOne("ParkingRegistry.ApplicationCore.Entities.Types.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParkingRegistry.ApplicationCore.Entities.PassCustomer", b =>
                {
                    b.HasOne("ParkingRegistry.ApplicationCore.Entities.Customer", "Customer")
                        .WithMany("Passes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingRegistry.ApplicationCore.Entities.Types.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParkingRegistry.ApplicationCore.Entities.CarCar", b =>
                {
                    b.HasOne("ParkingRegistry.ApplicationCore.Entities.PassCar", "Pass")
                        .WithOne("Car")
                        .HasForeignKey("ParkingRegistry.ApplicationCore.Entities.CarCar", "PassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ParkingRegistry.ApplicationCore.Entities.CarCustomer", b =>
                {
                    b.HasOne("ParkingRegistry.ApplicationCore.Entities.PassCustomer", "Pass")
                        .WithMany("Cars")
                        .HasForeignKey("PassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
