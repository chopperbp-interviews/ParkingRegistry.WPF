using ParkingRegistry.Infrastructure.WPF.Attributes;
using System;
using System.Collections;
using System.ComponentModel;
using System.Linq;
using System.Windows.Controls;

namespace ParkingRegistry.Infrastructure.WPF.Controls
{
    /// <summary>
    /// Interaction logic for DataGrid.xaml
    /// </summary>
    public partial class DataGridEx : DataGrid
    {
        public DataGridEx()
        {
            InitializeComponent();
        }
        protected override void OnAutoGeneratedColumns(EventArgs e)
        {
            base.OnAutoGeneratedColumns(e);
            this.Items.SortDescriptions.Clear();
            var sorts = this.Columns
                .Where(c => c.SortDirection != null)
                .Select(c => new SortDescription(c.SortMemberPath, c.SortDirection!.Value));
            sorts.ToList().ForEach(s => this.Items.SortDescriptions.Add(s));
        }
        protected override void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue)
        {
            base.OnItemsSourceChanged(oldValue, newValue);

        }
        private void OnAutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            if (e.PropertyDescriptor is PropertyDescriptor descriptor)
            {
                var gridattribute = descriptor.Attributes.OfType<GridColumnAttribute>().SingleOrDefault();

                e.Column.Header = gridattribute?.DisplayName ?? descriptor.Name;
                if (gridattribute != null)
                {
                    if (gridattribute.Order > 0)
                    {
                        e.Column.DisplayIndex = gridattribute.Order;
                    }
                    if (gridattribute.SortDirection != null)
                    {
                        e.Column.SortDirection = gridattribute.SortDirection;
                        e.Column.CanUserSort = true;
                        e.Column.SortMemberPath = descriptor.Name;
                    }
                }
                e.Cancel = gridattribute?.Canceled ?? false;
            }
            if (e.PropertyType == typeof(DateTimeOffset) || e.PropertyType == typeof(DateTimeOffset?) ||
                e.PropertyType == typeof(DateTime) || e.PropertyType == typeof(DateTime?))
            {
                var column = e.Column as DataGridTextColumn;
                if (column != null)
                {
                    column.Binding.StringFormat = "yyyy-MM-dd HH:mm";
                }
            }
        }
    }
}
